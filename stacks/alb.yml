AWSTemplateFormatVersion: '2010-09-09'
Description: Load Balancer for ECS tasks
Parameters:
  VpcStackName:
    Type: String
    Description: VpcStackName
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: ${VpcStackName}-PublicSubnet1
        - Fn::ImportValue:
            Fn::Sub: ${VpcStackName}-PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSG
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref WebTargetGroup1
                Weight: 100
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ApiRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
        - TargetGroupArn: !Ref WebTargetGroup2
          Type: forward
      Conditions: 
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api*
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  WebTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /healthy
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${VpcStackName}-VpcId
  WebTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /healthy
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${VpcStackName}-VpcId
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${VpcStackName}-VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
Outputs:
  ALBDNS:
    Value: !GetAtt LoadBalancer.DNSName
    Description: Application Load Balancer DNS Name
    Export: 
      Name: !Sub ${AWS::StackName}-DNSName
  LoadBalancer:
    Value: !Ref LoadBalancer
    Description: LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancer
  WebTargetGroup1:
    Value: !Ref WebTargetGroup1
    Description: TargetGroup For Web
    Export:
      Name: !Sub ${AWS::StackName}-WebTargetGroup1
  WebTargetGroup2:
    Value: !Ref WebTargetGroup2
    Description: TargetGroup For Web
    Export:
      Name: !Sub ${AWS::StackName}-WebTargetGroup2
  LoadBalancerSG:
    Value: !Ref LoadBalancerSG
    Description: LoadBalancerSG
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerSG
  WebTargetGroupInfoList:
    Value: !Join
      - ','
      - - !GetAtt WebTargetGroup1.TargetGroupName
        - !GetAtt WebTargetGroup2.TargetGroupName
    Export:
      Name: !Sub ${AWS::StackName}-WebTargetGroupInfoList
  Listener:
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Listener